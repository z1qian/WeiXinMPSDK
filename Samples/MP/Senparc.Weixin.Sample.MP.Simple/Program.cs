using System.Text;
using Senparc.Weixin.MP.AdvancedAPIs.MerChant;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

//使用本地缓存必须添加
builder.Services.AddMemoryCache();

#region 添加微信配置（一行代码）

//Senparc.Weixin 注册（必须）
builder.Services.AddSenparcWeixinServices(builder.Configuration);

#endregion

var app = builder.Build();

#region 启用微信配置（一句代码）

//启用微信配置（必须）
var registerService = app.UseSenparcWeixin(app.Environment,
        senparcSetting: null /* 不为 null 则覆盖 appsettings  中的 SenpacSetting 配置*/,
        senparcWeixinSetting: null /* 不为 null 则覆盖 appsettings  中的 SenpacWeixinSetting 配置*/,
        globalRegisterConfigure: register => { /* CO2NET 全局配置 */ },
        weixinRegisterConfigure: (register, weixinSetting) => {/* 注册公众号或其他平台信息（可以执行多次，注册多个公众号）*/},
        autoRegisterAllPlatforms: true /* 自动注册所有平台 */
        );

#region 使用 MessageHadler 中间件，用于取代创建独立的 Controller

//MessageHandler 中间件介绍：https://www.cnblogs.com/szw/p/Wechat-MessageHandler-Middleware.html
//使用公众号的 MessageHandler 中间件（不再需要创建 Controller）
app.UseMessageHandlerForMp("/WeixinAsync", CustomMessageHandler.GenerateMessageHandler, options =>
{
    //获取默认微信配置
    var weixinSetting = Senparc.Weixin.Config.SenparcWeixinSetting.Items["OpenVip"];

    //[必须] 设置微信配置
    options.AccountSettingFunc = context => weixinSetting;

    //[可选] 设置最大文本长度回复限制（超长后会调用客服接口分批次回复）
    options.TextResponseLimitOptions = new TextResponseLimitOptions(2048, weixinSetting.WeixinAppId);
});

#endregion

#endregion

#region 高级接口调用示例

app.MapGroup("/").MapGet("/TryApi", async () =>
{
    //演示获取已关注用户的 OpenId（分批获取的第一批）

    var weixinSetting = Senparc.Weixin.Config.SenparcWeixinSetting.MpSetting;
    var users = await Senparc.Weixin.MP.AdvancedAPIs.UserApi.GetAsync(weixinSetting.WeixinAppId, null);

    Console.WriteLine($"展示前 {users.count} 个 OpenId");

    return users.data.openid;
});

#endregion

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

#region 此部分代码为 Sample 共享文件需要而添加，实际项目无需添加
#if DEBUG
//app.UseStaticFiles(new StaticFileOptions
//{
//    FileProvider = new ManifestEmbeddedFileProvider(Assembly.GetExecutingAssembly(), "wwwroot"),
//    RequestPath = new PathString("")
//});

app.UseStaticFiles(new StaticFileOptions
{
    FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"..", "..", "Shared", "Senparc.Weixin.Sample.Shared", "wwwroot")),
    RequestPath = new PathString("")
});
#endif
#endregion

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
